#!/bin/bash

# 脚本参数说明: 第一个参数: git分支

# 总共更改了系统的三个地方:
# 1. 在/opt/目录下下载Monkey工程, 在MonkeyDev工程里下载 ./template和frida-ios-dump
# 2. 添加环境变量
# 3. 修正Xcode, 以支持ios command line tools


((0)) && {
#被注释的内容
:<<!COMMENT!

${} 截取字符串
(1)第一种方法:
从左向右截取最后一个string后的字符串
${varible##*string}   # variable=/var/mobile/Media  ${varible##*/} => Media
从左向右截取第一个string后的字符串
${varible#*string}    # variable=/var/mobile/Media  ${varible##*/} => Media

从右向左截取最后一个string后的字符串
${varible%%string*}
从右向左截取第一个string后的字符串
${varible%string*}
“*”只是一个通配符可以不要

(2)第二种方法：
${varible:n1:n2}:截取变量varible从n1开始的n2个字符，组成一个子字符串。可以根据特定字符偏移和长度，使用另一种形式的变量扩展，来选择特定子字符串。


plistbuddy用法:
https://www.jianshu.com/p/2167f755c47e

!COMMENT!

}

#set -e表示一旦脚本中有命令的返回值为非0，则脚本立即退出，后续命令不再执行;
#set -o pipefail表示在管道连接的命令序列中，只要有任何一个命令返回非0值，则整个管道返回非0值，即使最后一个命令返回0.
export setCmd="set -eo pipefail"
$setCmd

#导出环境变量
export PATH=/opt/MonkeyDev/bin:/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin:$PATH

#脚本名称和版本
#export scriptName="${0##*/}"
export scriptName=$(basename "$0")    # <Linux命令行与shell脚本编程大全>P290
export scriptVer="2.0"

#本地存储文件的目录
export MonkeyDevPath="/opt/MonkeyDev"
export backupFileExt=".MonkeyDev"

#获取用户名、用户组、用户目录、和profile文件
export userName="${SUDO_USER-$USER}"
export userGroup=`id -g $userName`
export userHome=`eval echo ~$userName`

#用户可能存在的profile文件   数组变量 <Linux命令行与shell脚本编程大全>P121
export bashProfileFiles=("$userHome/.zshrc" "$userHome/.bash_profile" "$userHome/.bashrc" "$userHome/.bash_login" "$userHome/.profile")

#获取临时文件名  创建一个前缀为md-install的临时目录,并在该目录下创建一个文件tempdirs
export tempDirsFile="`mktemp -d -t $scriptName`/tempdirs"
touch "$tempDirsFile"

#把LANG变量从当前环境中删除
unset LANG

#出错退出
function cleanup()
{
	local exitCode=$?
	set +e
	trap - $signals
	removeTempData
	exit $exitCode
}

#接收两个参数 参数1: 退出状态码  参数2: 出错信息
function panic()
{
	local exitCode=$1
	set +e
	shift
	#如果存在第二个参数, 就把第二个参数打印到 [标准错误] 管道
	[[ "$*" == "" ]] || echo "$*" >&2
	exit $exitCode
}

export signals="0 1 2 3 15"
#当shell接收到signals指定的信号时，执行cleanup命令
trap cleanup $signals

function removeTempData()
{
	local tempDirs
	if [[ -f "$tempDirsFile" ]]; then
		tempDirs=(`cat "$tempDirsFile"`)
		for td in "${tempDirs[@]}"; do
			rm -rf "$td" || true
		done
		rm -rf "`dirname $tempDirsFile`" || true
	fi
}
function getTempDir()
{
	$setCmd
	local tempDir
	#创建一个以md_install开头的临时目录, 如果创建失败就报错
	tempDir=`mktemp -d -t $scriptName` || panic $? "Failed to create temporary directory"
	#把刚刚创建的临时目录路径记录到之前创建的临时文件中, 以便后期统一删除
	echo "$tempDir" >> "$tempDirsFile" || panic $? "Failed to echo into $tempDirsFile"
	echo "$tempDir"   #命令替换方式返回字符串
}

function copyFile()
{
	cp -f "$1" "$2" || \
		panic $? "Failed to copy file $1 to $2"
}

#备份原文件
function requireBackup()
{
  #如果文件存在, 而且备份文件不存在, 就备份文件. 也就是说, 如果备份文件存在,就不会备份这个文件, 重复安装只会备份一次
	[[ ! -f "$1" || -f "${1}${backupFileExt}" ]] || copyFile "$1" "${1}${backupFileExt}"
}

#获取SDK信息
function getSdkProperty()
{
	$setCmd

	local sdk="$1"
	local propertyName="$2"

	propertyValue=`xcodebuild -version -sdk $sdk $propertyName` || panic $? "Failed to get $sdk SDK property $propertyName"

	[[ $propertyValue != "" ]] || panic 1 "Value of $sdk SDK property $propertyName cannot be empty"

	# return #
	echo "$propertyValue"
}

#下载文件
function downloadFile() # args: sourceUrl, targetPath
{
	local sourceUrl="$1"
	local targetPath="$2"
	local curlPath

	mkdir -p "${targetPath%/*}" || panic $? "Failed to make directory: ${targetPath%/*}"

	curlPath=`which curl` || \
		panic $? "Failed to get curl path"

	"$curlPath" --output "$targetPath" "$sourceUrl" || \
		panic $? "Failed to download $sourceUrl to $targetPath"
}

#解压文件 额... 这个貌似没必要专门弄个函数吧. 就一行代码的事情
function extractTar() # args: tarPath, outputPath
{
	local tarPath="$1"
	local outputPath="$2"
	
	tar -C "$outputPath" -zxf "$tarPath" || panic $? "Failed to extract $tarPath to $outputPath"
}

#下载github文件
function downloadGithubTarball() # args: url, outputDir, title
{
	$setcmd

	local url="$1"
	local outputDir="$2"
	local title="$3"
	local tempDirForTar
	local tempDirForFiles
	local untardDir
	local tarFile="file.tar.gz"

	echo "Downloading $title from Github..."

	tempDirForTar=`getTempDir`    #命令替换 <Linux命令行与shell脚本编程大全>P216
	tempDirForFiles=`getTempDir`
	
	downloadFile "$url" "$tempDirForTar/$tarFile"
	
	extractTar "$tempDirForTar/$tarFile" "$tempDirForFiles"

	untardDir=`find "$tempDirForFiles/"* -type d -depth 0` || panic $? "Failed to get untar'ed directory name of $tempDirForTar/$tarFile"

	mkdir -p "$outputDir" || panic $? "Failed to make directory: $outputDir"

  #解压后的文件复制到 指定目录
	cp -fR "$untardDir/"* "$outputDir/"
}

#修改文件权限
function changeMode()
{
	local mode="$1"
	local target="$2"
	local recursive="$3"
	local options

	[[ $recursive != "true" ]] || \
		options="-R"

	if [[ -e "$target" ]]; then
		chmod $options "$mode" "$target" || \
			panic $? "Failed to change mode to $mode on $target"
	fi
}

#获取用户profile文件
function determineUserBashProfileFile()
{
	$setCmd

	local f
	local filePath
	
	for f in "${bashProfileFiles[@]}"; do
	  #如果这个文件存在, 而且可以写入, 就采用这个文件
		if [[ -f "$f" ]]; then
			filePath="$f"
			echo "" >> "$f" || panic $? "Failed to echo into $f"
			break
		fi
	done

	#如果 profile文件数组中的 每个文件都不可用. 那就直接创建profile文件数组中的第一个文件,并修改新创建文件的属主和权限
	if [[ $filePath == "" ]]; then
		filePath="$bashProfileFiles"
		touch "$filePath" || panic $? "Failed to touch $filePath"
		chown "$userName:$userGroup" "$filePath" || panic $? "Failed to change owner-group of $filePath"
		changeMode 0600 "$filePath"
	fi
	
	# return #
	echo "$filePath"
}

#验证是否存在文件, 如果文件不存在, 直接退出脚本
function requireFile() # args: filePath [, touchFileIfNotFound]
{
	local filePath="$1"
	local touchFileIfNotFound="$2"
	
	if [[ ! -f "$filePath" ]]; then
		if [[ $touchFileIfNotFound == "true" ]]; then
			touch "$filePath" || panic $? "Failed to touch $filePath"
		else
			panic 1 "File $filePath not found"
		fi
	fi
}

#增加内容到文件
function addToFileIfMissing() # args: filePath, pattern, value
{
	local filePath="$1"
	local pattern="$2"
	local value="$3"
	local doesContain

	doesContain=`doesFileContain "$filePath" "$pattern"`

	#如果文件中不存在相关字符串, 就把内容添加的文件中
	[[ $doesContain == "true" ]] || echo "$value" >> "$filePath" || panic $? "Failed to echo into $filePath"
}

#判断文件是否包含内容
function doesFileContain() # args: filePath, pattern
{
	$setCmd
	
	local filePath="$1"
	local pattern="$2"
	local perlValue
	local funcReturn

	#调用了perl执行该判断. 其实用sed应该也行
	perlValue=`perl -ne 'if (/'"$pattern"'/) { print "true"; exit; }' "$filePath"` || panic $? "Failed to perl"

	if [[ $perlValue == "true" ]]; then
		funcReturn="true"
	else
		funcReturn="false"
	fi
	
	# return #
	echo $funcReturn
}

#从spec读取内容
#/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources/MacOSX Package Types.xcspec
#"com.apple.package-type.mach-o-executable"
function readXcodeSpecificationById(){ #args: filePath, id
	local filePath="$1"
	local id="$2"
	#先判断对该文件是否有读权限
	#/usr/libexec/PlistBuddy -x -c Print "/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources/MacOSX Package Types.xcspec"
	content=`/usr/libexec/PlistBuddy -x -c Print "$filePath"` || panic $? "Failed to get $filePath content"
	for (( i=0; i<=1; i++)); do
	  #/usr/libexec/PlistBuddy -x -c "Print 0" "/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources/MacOSX Package Types.xcspec"
		#打印数组中的第i个元素的内容, 并判断内容中是否包含 指定标志, 如果包含就返回元素的内容
		#echo "/usr/libexec/PlistBuddy -x -c 'Print $i' '$filePath'"
		dict=`/usr/libexec/PlistBuddy -x -c "Print $i" "$filePath"`
		if echo $dict | grep -qE "<string>$id</string>"; then
			echo "$dict"
		fi
	done
}

#往spec文件写入内容
function writeDictToSpecification(){ #args: filePath, content
	local filePath="$1"
	local content="$2"
	tempfile=`getTempDir`/dictfile
	echo "$content" >> $tempfile
	/usr/libexec/PlistBuddy -x -c 'add 0 dict' "$filePath" > /dev/null
	#合并指定你内容到指定文件
	/usr/libexec/PlistBuddy -x -c "merge $tempfile 0" "$filePath" > /dev/null
}

echo "在/opt/目录下下载Monkey工程, 在MonkeyDev工程里下载 ./template和frida-ios-dump"
# 创建/opt/MonkeyDev
mkdir -p "$MonkeyDevPath" || panic $? "Failed to make directory: $MonkeyDevPath"    #如果创建目录失败, 就报错退出.

branch="master"

#如果执行md-install脚本的时候, 指定了第一个参数, 那就把第一个参数作为分支,替换默认的master分支
if [[ "$1" ]]; then
	branch="$1"
fi

#下载一些基础文件和模板文件  使用的就是github工程页面 [Code]->[Download ZIP] 的链接
downloadGithubTarball "https://codeload.github.com/skfly007/MonkeyDev/tar.gz/$branch" "$MonkeyDevPath" "MonkeyDev base"
downloadGithubTarball "https://codeload.github.com/skfly007/MonkeyDev-Xcode-Templates/tar.gz/$branch" "$MonkeyDevPath/templates" "Xcode templates"

#下载frida-ios-dump
echo "Downloading frida-ios-dump from Github..."
downloadFile "https://raw.githubusercontent.com/skfly007/frida-ios-dump/master/dump.py" "$MonkeyDevPath/bin/dump.py"
downloadFile "https://raw.githubusercontent.com/skfly007/frida-ios-dump/master/dump.js" "$MonkeyDevPath/bin/dump.js"

chmod +x "$MonkeyDevPath/bin/dump.py"

echo "创建xcode工程模板符号链接"

#$userHome/Library/Developer/Xcode/Templates/MonkeyDev linkto $MonkeyDevPath/templates
userDevDir="$userHome/Library/Developer"
userTemplatesDir="$userDevDir/Xcode/Templates"

if [[ ! -d "$userTemplatesDir" ]]; then
  #创建xcode工程模板目录
	mkdir -p "$userTemplatesDir" || panic $? "Failed to make directory: $userTemplatesDir"
	#修改目录属主
	chown -R "$userName:$userGroup" "$userDevDir" || panic $? "Failed to change ownership-group of $userDevDir"
fi

ln -fhs "$MonkeyDevPath/templates" "$userTemplatesDir/MonkeyDev"


echo "修改用户profile文件 添加MonkeyDev相关的环境变量..."

userBashProfileFile=`determineUserBashProfileFile`
echo "选中的profile文件为: $userBashProfileFile"
addToFileIfMissing "$userBashProfileFile" "^(export)? *MonkeyDevPath=.*" "export MonkeyDevPath=$MonkeyDevPath"
addToFileIfMissing "$userBashProfileFile" "^(export)? *MonkeyDevDeviceIP=.*" "export MonkeyDevDeviceIP="
addToFileIfMissing "$userBashProfileFile" "^(export)? *PATH=.*(\\\$MonkeyDevPath\\/bin|${MonkeyDevPath//\//\\/}\\/bin).*" "export PATH=$MonkeyDevPath/bin:\$PATH"


echo "开始调整xcode配置以支持iphoneos command line tools"
#/Applications/Xcode_13.app/Contents/Developer/Platforms/iPhoneOS.platform
iosSdkPlatformPath=`getSdkProperty iphoneos PlatformPath`
#/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform
macosSdkPlatformPath=`getSdkProperty macosx PlatformPath`

# /Applications/Xcode_13.app/Contents/PlugIns/IDEiOSSupportCore.ideplugin/Contents/Resources/Embedded-Device.xcspec
specificationFile=$(cd $iosSdkPlatformPath/../../.. && pwd)/PlugIns/IDEiOSSupportCore.ideplugin/Contents/Resources/Embedded-Device.xcspec

requireFile "$specificationFile" false

#backup
requireBackup "$specificationFile"

hasPackageTypeForCommandLineTool=`doesFileContain "$specificationFile" 'com.apple.package-type.mach-o-executable'`
hasProductTypeForCommandLineTool=`doesFileContain "$specificationFile" 'com.apple.product-type.tool'`

#/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Specifications
macosxSDKSpecificationsPath=$macosSdkPlatformPath/Developer/Library/Xcode/Specifications

#/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources/MacOSX Package Types.xcspec
packageTypesForMacOSXPath="$macosxSDKSpecificationsPath/MacOSX Package Types.xcspec"
#/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources/MacOSX Product Types.xcspec
productTypesForMacOSXPath="$macosxSDKSpecificationsPath/MacOSX Product Types.xcspec"


currXcodeVersion=$(xcodebuild -version| grep Xcode)

:<<!
Xcode 13.0
Build version 13A233
!

case $currXcodeVersion in
"Xcode 13.0")
  echo "当前Xcode版本为: Xcode13. 该版本的Command Line Tool工程处于BETA阶段..."
  #/Applications/Xcode_13.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources/
  macosxSDKSpecificationsPath=$macosSdkPlatformPath/Developer/Library/Xcode/PrivatePlugIns/IDEOSXSupportCore.ideplugin/Contents/Resources
  #/Applications/Xcode_13.app/Contents/PlugIns/XCBSpecifications.ideplugin/Contents/Resources/Darwin Package Types.xcspec
  packageTypesForMacOSXPath="/Applications/Xcode_13.app/Contents/PlugIns/XCBSpecifications.ideplugin/Contents/Resources/Darwin Package Types.xcspec"
  #/Applications/Xcode_13.app/Contents/PlugIns/XCBSpecifications.ideplugin/Contents/Resources/Darwin Product Types.xcspec
  productTypesForMacOSXPath="/Applications/Xcode_13.app/Contents/PlugIns/XCBSpecifications.ideplugin/Contents/Resources/Darwin Product Types.xcspec";;
*)
  echo "无法识别的Xcode版本"
  exit 255;;
esac


requireFile "$packageTypesForMacOSXPath" false
requireFile "$productTypesForMacOSXPath" false


echo "开始处理Package Types.xcspec"
if [[ $hasPackageTypeForCommandLineTool != "true" ]]; then
	machoDict=`readXcodeSpecificationById "$packageTypesForMacOSXPath" "com.apple.package-type.mach-o-executable"`
	echo "筛选结果: $machoDict"
  echo "Package Types.xcspec处理完成"
	writeDictToSpecification "$specificationFile" "$machoDict"
else
  echo "Embedded-Device.xcspec已被处理过, 跳过"
fi

echo "开始处理Product Types.xcspec"
if [[ $hasProductTypeForCommandLineTool != "true" ]]; then
	toolDict=`readXcodeSpecificationById "$productTypesForMacOSXPath" "com.apple.product-type.tool"`
	echo "筛选结果: $toolDict"
  echo "Product Types.xcspec处理完成"
	writeDictToSpecification "$specificationFile" "$toolDict"
else
  echo "Embedded-Device.xcspec已被处理过, 跳过"
fi

exit 0
